class State:
    READY = 0
    READY_COMMENT = 1
    MINUS = 2
    MINUS_MINUS = 3
    MINUS_MINUS_MINUS = 4
    MINUS_MINUS_MINUS_MINUS = 5
    EQUALS = 6
    EQUALS_EQUALS = 7
    EQUALS_EQUALS_EQUALS = 8
    EQUALS_EQUALS_EQUALS_EQUALS = 9
    ACTION = 10
    ACTION_LF = 11
    ACTION_LF_MINUS = 12
    ACTION_LF_MINUS_MINUS = 13
    ACTION_LF_MINUS_MINUS_MINUS = 14
    ACTION_LF_MINUS_MINUS_MINUS_MINUS = 15
    ACTION_LF_EQUALS = 16
    ACTION_LF_EQUALS_EQUALS = 17
    ACTION_LF_EQUALS_EQUALS_EQUALS = 18
    ACTION_LF_EQUALS_EQUALS_EQUALS_EQUALS = 19
    ACTION_COMMENT = 20
    STATE = 21
    STATE_COMMENT = 22

class Event:
    LF = 0
    MINUS = 1
    EQUALS = 2
    BACKSLASH = 3
    OPEN_PARENTHESIS = 4
    CLOSE_PARENTHESIS = 5
    OTHERS = 6
    EOI = 7

class Action:
    APPEND_TMP = 1
    COMMENT_ERROR = 2
    APPEND = 3
    COMBINE_TMP_COMMA_APPEND = 4
    COMBINE_TMP_COMMA_ACTION = 5
    ACTION = 6
    STATE_ERROR = 7
    STATE = 8

class FSM:
    def __init__(self, action_handler = None):
        self.transform_states = [[State.READY, State.MINUS, State.EQUALS, State.STATE, State.READY_COMMENT, State.READY, State.ACTION, State.READY], [State.READY_COMMENT, State.READY_COMMENT, State.READY_COMMENT, State.READY_COMMENT, State.READY, State.READY, State.READY_COMMENT, State.READY_COMMENT], [State.ACTION, State.MINUS_MINUS, State.ACTION, State.STATE, State.ACTION_COMMENT, State.MINUS, State.ACTION, State.READY], [State.ACTION, State.MINUS_MINUS_MINUS, State.ACTION, State.STATE, State.ACTION_COMMENT, State.MINUS_MINUS, State.ACTION, State.READY], [State.ACTION, State.MINUS_MINUS_MINUS_MINUS, State.ACTION, State.STATE, State.ACTION_COMMENT, State.MINUS_MINUS_MINUS, State.ACTION, State.READY], [State.STATE, State.MINUS_MINUS_MINUS_MINUS, State.STATE, State.STATE, State.ACTION_COMMENT, State.MINUS_MINUS_MINUS_MINUS, State.ACTION, State.READY], [State.ACTION, State.ACTION, State.EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.EQUALS, State.ACTION, State.READY], [State.ACTION, State.ACTION, State.EQUALS_EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.EQUALS_EQUALS, State.ACTION, State.READY], [State.ACTION, State.ACTION, State.EQUALS_EQUALS_EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.EQUALS_EQUALS_EQUALS, State.ACTION, State.READY], [State.STATE, State.ACTION, State.EQUALS_EQUALS_EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.EQUALS_EQUALS_EQUALS_EQUALS, State.ACTION, State.READY], [State.ACTION_LF, State.ACTION, State.ACTION, State.STATE, State.ACTION_COMMENT, State.ACTION, State.ACTION, State.READY], [State.ACTION, State.ACTION_LF_MINUS, State.ACTION_LF_EQUALS, State.STATE, State.ACTION_COMMENT, State.ACTION_LF, State.ACTION, State.READY], [State.ACTION, State.ACTION_LF_MINUS_MINUS, State.ACTION, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_MINUS, State.ACTION, State.READY], [State.ACTION, State.ACTION_LF_MINUS_MINUS_MINUS, State.ACTION, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_MINUS_MINUS, State.ACTION, State.READY], [State.ACTION, State.ACTION_LF_MINUS_MINUS_MINUS_MINUS, State.ACTION, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_MINUS_MINUS_MINUS, State.ACTION, State.READY], [State.STATE, State.ACTION_LF_MINUS_MINUS_MINUS_MINUS, State.ACTION, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_MINUS_MINUS_MINUS_MINUS, State.ACTION, State.READY], [State.ACTION, State.ACTION, State.ACTION_LF_EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_EQUALS, State.ACTION, State.READY], [State.ACTION, State.ACTION, State.ACTION_LF_EQUALS_EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_EQUALS_EQUALS, State.ACTION, State.READY], [State.ACTION, State.ACTION, State.ACTION_LF_EQUALS_EQUALS_EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_EQUALS_EQUALS_EQUALS, State.ACTION, State.READY], [State.STATE, State.ACTION, State.ACTION_LF_EQUALS_EQUALS_EQUALS_EQUALS, State.STATE, State.ACTION_COMMENT, State.ACTION_LF_EQUALS_EQUALS_EQUALS_EQUALS, State.ACTION, State.READY], [State.ACTION_COMMENT, State.ACTION_COMMENT, State.ACTION_COMMENT, State.ACTION_COMMENT, State.READY, State.ACTION, State.ACTION_COMMENT, State.READY], [State.READY, State.STATE, State.STATE, State.READY, State.STATE_COMMENT, State.READY, State.STATE, State.READY], [State.STATE_COMMENT, State.STATE_COMMENT, State.STATE_COMMENT, State.STATE_COMMENT, State.READY, State.STATE, State.STATE_COMMENT, State.READY]]
        self.transform_actions = [[0, Action.APPEND_TMP, Action.APPEND_TMP, 0, 0, Action.COMMENT_ERROR, Action.APPEND, 0], [0, 0, 0, 0, Action.COMMENT_ERROR, 0, 0, 0], [Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [0, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, 0], [Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [0, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, 0], [Action.APPEND_TMP, Action.APPEND, Action.APPEND, Action.ACTION, 0, 0, Action.APPEND, Action.ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.ACTION, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.COMBINE_TMP_COMMA_ACTION], [Action.ACTION, Action.COMBINE_TMP_COMMA_APPEND, Action.APPEND_TMP, Action.COMBINE_TMP_COMMA_ACTION, 0, 0, Action.COMBINE_TMP_COMMA_APPEND, Action.ACTION], [0, 0, 0, 0, Action.COMMENT_ERROR, 0, 0, Action.ACTION], [Action.STATE_ERROR, Action.APPEND, Action.APPEND, Action.STATE_ERROR, 0, Action.COMMENT_ERROR, Action.APPEND, Action.STATE], [0, 0, 0, 0, Action.COMMENT_ERROR, 0, 0, Action.STATE]]
        self.handler = action_handler
        self.state = State.READY
    def process(self, event, data = None):
        if self.handler:
            self.handler(self.transform_actions[self.state][event], data)
        self.state = self.transform_states[self.state][event]

